staged: limbo o status cuando un archivo esta en git,
ejemplo:
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        historia.txt
        notesCourseGit/

nothing added to commit but untracked files present (use "git add" to track)

(en este caso no esta en el staged)

git init: 
.-para inicializar un nuevo repositorio git y el staged
.-lo usamos para determinar la carpeta en la que vamos a trabajar

git status:lo usamos para saber el status del proyecto en ese momento
git add:
.-añade los archivos a git
.-cuando modificas un archivo tienes que añadirlo primero y luego ya usas commit

git rm -cached nombre_del_archivo.txt: para eliminar el archivo del staged(ram)

git commit:
.-es lo que envia esos datos al repositorio puedes dejar un mensaje con -m "mensaje"

git config: muestra configuraciones de git también podemos usar –list para mostrar la configuración 
por defecto de nuestro git y si añadimos --show-origin inhales nos muestra las configuraciones guardadas y su ubicación.

git config --global user.name: cambia de manera global el nombre del usuario, seguidamente ponemos entre comillas nuestro nombre.

git config --global user.email: cambia de manera global el email del usuario, seguidamente ponemos entre comillas nuestro nombre.

git log: se usa para ver la historia de nuestros archivos, los commits, el usuario que lo cambió,
 cuando se realizaron los cambios etc. seguidamente ponemos el nombre de nuestro archivo.

clase 9:
 git show: muestra los cambios que an existido en un archivo y es util para detectar errores brokens y como podemos solucionarlo
 git diff: se puede usar para ver los cambios entre los commits de los archivos de la siguiente manera, ejemplo:
 git diff  9b1a5969273ba787760dfc7f25032d23dd84923e 16f34d62ea5c8b9119f376c031642039d002a8
f9 (estos numeros salen de git log)

clase 10:
que es el staging?
cuando entramos a un archivo con el comando git init se cre aun area en memoria ram llamada stagig es un area completamente
deconectada funciona en memoria ram y es donde al principio iras agregando tus cambios, y se crea el repositorio(la carpeta .git), ahi van
a estar todos los cambios al final de tu proyecto. Una vez creada esa area la agregas al staging area con git add, o lo puedes remover con git rm
y con git commit se va a el repositorio el cual su nombre es mater.
.-Staging es la memoria ram es el archivo que agregas cambios que tu vas cambiando y e repositorio real es el que agregas cuando 
agregas un commit .

¿Que es el comando check out? con este comando puedes traerte versiones de un mismo archivo de tu repoitorio a tu directori esto nos permite actualizarnos si por ejemplo alguien trabajo
una rama diferente y quieres traertela del repositorio  tu directorio o carpeta.

clase 11
¿que es un brach(RAMA) y como funciona un Mergeen git?
Para explicar esto tenemos la rama master la normal de toda la vida imaginan un momento que euieres experimentar entonces
se crea la rama experimentos y esta rama se crea independientemente de la rama master.
Ahora imagina que tenemos un bug entonces creas una nueva rama le pones el nombre de hotfix
y esta rama se conecta con la rama master a esta conexion o puente le llamamos  merge. y luego 
con la primer rama tambien le llamamos merge a la rama experimentos le llaman development

clase 12
git reset: sirve para volver a la version de algun de un repositorio, hay 2 tipos-
git reset --hard: Todo vuelve al estado anterior el mas comun 
git reset --soft: volvemos a la version anterior pero lo que tengamos en staging sigue en staging
