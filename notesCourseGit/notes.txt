staged: limbo o staturchivo esta en git,
ejempls cuando un ao:
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        historia.txt
        notesCourseGit/

nothing added to commit but untracked files present (use "git add" to track)

(en este caso no esta en el staged)

git init: 
.-para inicializar un nuevo repositorio git y el staged
.-lo usamos para determinar la carpeta en la que vamos a trabajar

git status:lo usamos para saber el status del proyecto en ese momento
git add:
.-añade los archivos a git
.-cuando modificas un archivo tienes que añadirlo primero y luego ya usas commit

git rm -cached nombre_del_archivo.txt: para eliminar el archivo del staged(ram)

git commit:
.-es lo que envia esos datos al repositorio puedes dejar un mensaje con -m "mensaje"

git config: muestra configuraciones de git también podemos usar –list para mostrar la configuración 
por defecto de nuestro git y si añadimos --show-origin inhales nos muestra las configuraciones guardadas y su ubicación.

git config --global user.name: cambia de manera global el nombre del usuario, seguidamente ponemos entre comillas nuestro nombre.

git config --global user.email: cambia de manera global el email del usuario, seguidamente ponemos entre comillas nuestro nombre.

git log: se usa para ver la historia de nuestros archivos, los commits, el usuario que lo cambió,
 cuando se realizaron los cambios etc. seguidamente ponemos el nombre de nuestro archivo.

clase 9:
 git show: muestra los cambios que an existido en un archivo y es util para detectar errores brokens y como podemos solucionarlo
 git diff: se puede usar para ver los cambios entre los commits de los archivos de la siguiente manera, ejemplo:
 git diff  9b1a5969273ba787760dfc7f25032d23dd84923e 16f34d62ea5c8b9119f376c031642039d002a8
f9 (estos numeros salen de git log)

clase 10:
que es el staging?
cuando entramos a un archivo con el comando git init se crea un area en memoria ram llamada staging es un area completamente
deconectada funciona en memoria ram y es donde al principio iras agregando tus cambios, y se crea el repositorio(la carpeta .git), ahi van
a estar todos los cambios al final de tu proyecto. Una vez creada esa area la agregas al staging area con git add, o lo puedes remover con git rm
y con git commit se va a el repositorio el cual su nombre es mater.
.-Staging es la memoria ram es el archivo que agregas cambios que tu vas cambiando y e repositorio real es el que agregas cuando 
agregas un commit .

¿Que es el comando check out? con este comando puedes traerte versiones de un mismo archivo de tu repoitorio a tu directorio esto nos permite actualizarnos si por ejemplo alguien trabajo
una rama diferente y quieres traertela del repositorio  tu directorio o carpeta.

clase 11
¿que es un brach(RAMA) y como funciona un Mergeen git?
Para explicar esto tenemos la rama master la normal de toda la vida imaginan un momento que quieres experimentar entonces
se crea la rama experimentos y esta rama se crea independientemente de la rama master.
Ahora imagina que tenemos un bug entonces creas una nueva rama le pones el nombre de hotfix
y esta rama se conecta con la rama master a esta conexion o puente le llamamos  merge. y luego 
con la primer rama tambien le llamamos development

clase 12
git reset: sirve para volver a la version de algun de un repositorio. Con este comando borramos los cambios, hay 2 tipos-
git reset --hard: Todo vuelve al estado anterior el mas comun 
git reset --soft: volvemos a la version anterior pero lo que tengamos en staging sigue en staging

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging,
 así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información 
de los commits y del área de staging se borra del historial.

git checkout: con este comando hacemos lo mismo que git reset solo que aqui no se guardan los 
cambios y los tienes que guardan con un add 

clase 13
git reset HEAD: Este es el comando para sacar archivos del área de staging.
 No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último 
commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

Por qué esto es importante?
Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios 
se mueven al área de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no está listo todavía.
 Actualizaste el archivo, pero ese cambio no debe ir en el próximo commit por ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. 
Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! 
Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. 
Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.

En cambio, si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. 
Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo 
(no con sus últimos cambios, pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.

Git rm
git rm --cached:
.- Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. 
Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: 
.-Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos,
 de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

Clase 14 Flujo de trabajo basico
Cuando empiezas a trabajar en un entorno local, el proyecto vive únicamente en tu computadora. Esto significa que no hay forma de que otros miembros del equipo trabajen en él.

Para solucionar esto, utilizamos los servidores remotos: un nuevo estado que deben seguir nuestros archivos para conectarse y trabajar con equipos de cualquier parte del mundo.

Estos servidores remotos pueden estar alojados en GitHub, GitLab, BitBucket, entre otros. Lo que van a hacer es guardar el mismo repositorio que tienes en tu computadora y 
darnos una URL con la que todos podremos acceder a los archivos del proyecto. Así, el equipo podrá descargarlos, hacer cambios y volverlos a enviar al servidor remoto para que 
otras personas vean los cambios, comparen sus versiones y creen nuevas propuestas para el proyecto.

Esto significa que debes aprender algunos nuevos comandos

Comandos para trabajo remoto con GIT
git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.
Adicionalmente, tenemos otros comandos que nos sirven para trabajar en proyectos muy grandes:

git log --oneline:Te muestra el id commit y el título del commit.
git log --decorate: Te muestra donde se encuentra el head point en el log.
git log --stat: Explica el número de líneas que se cambiaron brevemente.
git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
git log -3: Limitamos el número de commits.
git log --after=“2018-1-2”
git log --after=“today” y
git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html: Busca los commits en un archivo en específico.
git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
git log > log.txt: guardar los logs en un archivo txt

clase 15 branches de git
cuando uno crea una rama crea un branche del ultimo commit que basicamente es una copia y todos los cambios que hagamos 
en esta rama no los vamos a ver la rama master hasta que los fucionemos con un proceso que se llama merge

clase 16 fusion de ramas con git merge 
el comando git commit -am "nombre_del_archivo" : realiza un add al archivo y un commit al mismo tiempo